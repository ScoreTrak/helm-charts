1. Passwords

export SCORETRAK_PASSWORD=$(kubectl get --namespace {{ .Release.Namespace }} -o yaml secrets {{ include "call-nested" ( list . "scoretrak" "scoretrak.fullname" ) }} | yq e '.data.SCORETRAK_PASS' - | base64d)
export PAYMENTS_PASSWORD=$(kubectl get --namespace {{ .Release.Namespace }} -o yaml secrets {{ include "call-nested" ( list . "payments" "payments.fullname" ) }} | yq e '.data.PAYMENTS_PASS' - | base64d)
echo $SCORETRAK_PASSWORD | pbcopy
echo $PAYMENTS_PASSWORD | pbcopy

2. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "payments.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "payments.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "payments.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "payments.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{ if and (eq ( lower .Values.server.config.db.use ) "cockroach") (.Values.server.config.db.cockroachdb.configureZones | default true) }}
3. Execute queries to ensure cockroach database stability for scoretrak (temp fix)

curl -OOOOOOOOO https://raw.githubusercontent.com/cockroachdb/cockroach/master/cloud/kubernetes/client-secure.yaml
yq e -i '.spec.serviceAccountName = "{{ .Release.Name }}-cockroachdb"' client-secure.yaml
k create -f client-secure.yaml
kubectl exec -it cockroachdb-client-secure -- ./cockroach sql --certs-dir=/cockroach-certs --host={{ .Release.Name }}-cockroachdb-public

Execute the following queries
ALTER RANGE default CONFIGURE ZONE USING gc.ttlseconds = {{ .Values.server.config.db.cockroachdb.defaultZoneConfig.GcTtlSeconds | default 600 }}
SET CLUSTER SETTING kv.range.backpressure_range_size_multiplier = {{ .Values.server.config.db.cockroachdb.defaultZoneConfig.Backpressure | default 0 }}
{{ end }}
